{"ast":null,"code":"import { css } from 'styled-components';\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar styledIf = function styledIf(method, condition) {\n  return function () {\n    for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {\n      names[_key] = arguments[_key];\n    }\n\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return function (props) {\n        return (method === 'match' ? props[names[0]] === names[1] : names[method](function (name) {\n          return Boolean(props[name]) === condition;\n        })) && css.apply(void 0, _toConsumableArray(handleFunctions(args, props)));\n      };\n    };\n  };\n};\n\nvar handleFunctions = function handleFunctions(args, props) {\n  var css = '';\n\n  for (var i = 1; i < args.length; i++) {\n    if (typeof args[i] === 'function') {\n      var output = args[i](props);\n\n      if (output.includes(':')) {\n        css += output;\n      }\n    }\n  }\n\n  if (css) {\n    var newArgs = args.slice(0);\n    var argCss = args[0].slice(1);\n    argCss.unshift(css + newArgs[0][0]);\n    newArgs[0] = argCss;\n    return newArgs;\n  }\n\n  return args;\n};\n\nvar is = styledIf('every', true);\nvar isNot = styledIf('every', false);\nvar isOr = styledIf('some', true);\nvar isSomeNot = styledIf('some', false);\nvar match = styledIf('match');\nexport default is;\nexport { isNot, isOr, isSomeNot, match };","map":null,"metadata":{},"sourceType":"module"}